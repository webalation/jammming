{"version":3,"sources":["util/Spotify.js","Components/SearchBar/SearchBar.js","Components/Track/Track.js","Components/TrackList/TrackList.js","Components/SearchResults/SearchResults.js","Components/Playlist/Playlist.js","Components/App/App.js","serviceWorker.js","index.js"],"names":["accessToken","SearchBar","props","state","term","search","bind","handleTermChange","this","onSearch","event","setState","target","value","className","placeholder","onChange","onClick","React","Component","Track","addTrack","removeTrack","isRemoval","onAdd","track","onRemove","name","artist","album","renderAction","TrackList","tracks","map","key","id","SearchResults","searchResults","Playlist","handleNameChange","onNameChange","defaultValue","playlistTracks","onSave","Spotify","getAccessToken","accessTokenMatch","window","location","href","match","expiresInMatch","expiresIn","Number","setTimeout","history","pushState","accessUrl","process","fetch","headers","Authorization","then","response","json","jsonResponse","items","artists","uri","savePlaylist","trackUris","length","userId","method","body","JSON","stringify","playlistId","uris","App","playlistName","updatePlaylistName","find","savedTrack","push","filter","currentTrack","Boolean","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.3108ba76.chunk.js","sourcesContent":["const clientId = process.env.REACT_APP_CLIENT_ID;\nconst redirectUri = 'https://webalation.github.io/jammming/';\nlet accessToken;\n\nconst Spotify = {\n    getAccessToken() {\n        if (accessToken) {\n            return accessToken;\n        }\n\n        // check for access token match\n        const accessTokenMatch = window.location.href.match(/access_token=([^&]*)/);\n        const expiresInMatch = window.location.href.match(/expires_in=([^&]*)/);\n\n        if (accessTokenMatch && expiresInMatch) {\n            accessToken = accessTokenMatch[1];\n            const expiresIn = Number(expiresInMatch[1]);\n            // This clears the parameters, allowing us to grab a new access token when it expires.\n            window.setTimeout(() => accessToken = '', expiresIn * 1000);\n            window.history.pushState('Access Token', null, '/');\n            return accessToken;\n        } else {\n            const accessUrl = `https://accounts.spotify.com/authorize?client_id=${clientId}&response_type=token&scope=playlist-modify-public&redirect_uri=${redirectUri}`;\n            window.location = accessUrl;\n        }\n    },\n\n    search(term) {\n        const accessToken = Spotify.getAccessToken();\n\n        return fetch(`https://api.spotify.com/v1/search?type=track&q=${term}`, {\n            headers: {\n                Authorization: `Bearer ${accessToken}`\n            }\n        }).then(response => {\n            return response.json()\n        }).then(jsonResponse => {\n            if (!jsonResponse.tracks) {\n                return [];\n            }\n            return jsonResponse.tracks.items.map(track => ({\n                id: track.id,\n                name: track.name,\n                artists: track.artists[0].name,\n                album: track.album.name,\n                uri: track.uri\n            }));\n        });\n    },\n\n    savePlaylist(name, trackUris) {\n        if (!name || !trackUris.length) {\n            return;\n        }\n\n        const accessToken = Spotify.getAccessToken();\n        const headers = { Authorization: `Bearer ${accessToken}` };\n        let userId;\n\n        return fetch('https://api.spotify.com/v1/me', { headers: headers }\n        ).then(response => response.json()\n        ).then(jsonResponse => {\n            userId = jsonResponse.id;\n            \n            return fetch(`https://api.spotify.com/v1/users/${userId}/playlists`, {\n                headers: headers,\n                method: 'POST',\n                body: JSON.stringify({ name: name })\n            }).then(response => response.json()\n            ).then(jsonResponse => {\n                const playlistId = jsonResponse.id;\n                \n                return fetch(`https://api.spotify.com/v1/users/${userId}/playlists/${playlistId}/tracks`, {\n                    headers: headers,\n                    method: 'POST',\n                    body: JSON.stringify({ uris: trackUris })\n                })\n            });\n        });\n    }\n}\n\nexport default Spotify;","import React from 'react';\nimport './SearchBar.css';\n\nclass SearchBar extends React.Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\n\t\tthis.state = {\n\t\t\tterm: ''\n\t\t}\n\n\t\tthis.search = this.search.bind(this);\n\t\tthis.handleTermChange = this.handleTermChange.bind(this);\n\t}\n\n\tsearch() {\n\t\tthis.props.onSearch(this.state.term);\n\t}\n\n\thandleTermChange(event) {\n\t\tthis.setState({\n\t\t\tterm: event.target.value\n\t\t});\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<div className=\"SearchBar\">\n  \t\t\t\t<input placeholder=\"Enter A Song, Album, or Artist\" onChange={this.handleTermChange} />\n  \t\t\t\t<button className=\"SearchButton\" onClick={this.search}>SEARCH</button>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default SearchBar;","import React from 'react';\n\nimport './Track.css';\n\nclass Track extends React.Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\n\t\tthis.addTrack = this.addTrack.bind(this);\n\t\tthis.removeTrack = this.removeTrack.bind(this);\n\t}\n\n\trenderAction() {\n\t\treturn\tthis.props.isRemoval \n\t\t\t\t? <button className=\"Track-action\" onClick={this.removeTrack}>-</button>\n\t\t\t\t: <button className=\"Track-action\" onClick={this.addTrack}>+</button>\n\t}\n\n\taddTrack() {\n\t\tthis.props.onAdd(this.props.track);\n\t}\n\n\tremoveTrack() {\n\t\tthis.props.onRemove(this.props.track);\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<div className=\"Track\">\n  \t\t\t\t<div className=\"Track-information\">\n    \t\t\t\t<h3>{this.props.track.name}</h3>\n    \t\t\t\t<p>{this.props.track.artist} | {this.props.track.album}</p>\n  \t\t\t\t</div>\n  \t\t\t\t{this.renderAction()}\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default Track;","import React from 'react';\nimport './TrackList.css';\nimport Track from '../Track/Track';\n\nclass TrackList extends React.Component {\n\trender() {\n\t\treturn (\n\t\t\t<div className=\"TrackList\">\n\t\t\t\t{\n\t\t\t\t\tthis.props.tracks.map(track => {\n\t\t\t\t\t\treturn <Track key={track.id} \n\t\t\t\t\t\t\t\t\t  track={track} \n\t\t\t\t\t\t\t\t\t  onAdd={this.props.onAdd}\n\t\t\t\t\t\t\t\t\t  onRemove={this.props.onRemove}\n\t\t\t\t\t\t\t\t\t  isRemoval={this.props.isRemoval} />\n\t\t\t\t\t})\n\t\t\t\t}\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default TrackList;","import React from 'react';\nimport './SearchResults.css';\nimport TrackList from '../TrackList/TrackList';\n\nclass SearchResults extends React.Component {\n\trender() {\n\t\treturn (\n\t\t\t<div className=\"SearchResults\">\n  \t\t\t\t<h2>Results</h2>\n  \t\t\t\t<TrackList tracks={this.props.searchResults} \n\t\t\t\t  \t\t   onAdd={this.props.onAdd} \n\t\t\t\t\t\t   isRemoval={false} />\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default SearchResults;","import React from 'react';\nimport TrackList from '../TrackList/TrackList';\nimport './Playlist.css';\n\nclass Playlist extends React.Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\n\t\tthis.handleNameChange = this.handleNameChange.bind(this);\n\t}\n\n\thandleNameChange(event) {\n\t\tthis.props.onNameChange(event.target.value);\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<div className=\"Playlist\">\n  \t\t\t\t<input defaultValue={'New Playlist'} onChange={this.handleNameChange} />\n  \t\t\t\t<TrackList tracks={this.props.playlistTracks}\n\t\t\t\t  \t\t   onRemove={this.props.onRemove}\n\t\t\t\t\t\t   isRemoval={true}\n\t\t\t\t\t\t   onChange={this.handleNameChange} />\n  \t\t\t\t<button className=\"Playlist-save\" onClick={this.props.onSave}>SAVE TO SPOTIFY</button>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default Playlist;","import React from 'react';\nimport './App.css';\nimport SearchBar from '../SearchBar/SearchBar';\nimport SearchResults from '../SearchResults/SearchResults';\nimport Playlist from '../Playlist/Playlist';\nimport Spotify from '../../util/Spotify';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      searchResults: [],\n      playlistName: 'My Playlist',\n      playlistTracks: []\n    }\n\n    this.addTrack = this.addTrack.bind(this);\n    this.removeTrack = this.removeTrack.bind(this);\n    this.updatePlaylistName = this.updatePlaylistName.bind(this);\n    this.savePlaylist = this.savePlaylist.bind(this);\n    this.search = this.search.bind(this);\n  }\n\n  addTrack(track) {\n    let tracks = this.state.playlistTracks;\n\n    if (tracks.find(savedTrack => savedTrack.id === track.id)) {\n      return;\n    } else {\n      tracks.push(track);\n      this.setState({\n        playlistTracks: tracks\n      });\n    }\n  }\n\n  removeTrack(track) {\n    let tracks = this.state.playlistTracks;\n    tracks = tracks.filter(currentTrack => currentTrack.id !== track.id);\n\n    this.setState({\n      playlistTracks: tracks\n    });\n  }\n\n  updatePlaylistName(name) {\n    this.setState({\n      playlistName: name\n    });\n  }\n\n  savePlaylist() {\n    const trackUris = this.state.playlistTracks.map(track => track.uri);\n    Spotify.savePlaylist(this.state.playlistName, trackUris).then(() => {\n      this.setState({\n        playlistName: 'New Playlist',\n        playlistTracks: []\n      });\n    });\n  }\n\n  search(term) {\n    Spotify.search(term).then(searchResults => {\n      this.setState({\n        searchResults: searchResults\n      });\n    });\n  }\n\n  render() {\n    return (\n      <div>\n        <h1>Ja<span className=\"highlight\">mmm</span>ing</h1>\n        <div className=\"App\">\n          <SearchBar onSearch={this.search} />\n          <div className=\"App-playlist\">\n            <SearchResults searchResults={this.state.searchResults} \n                           onAdd={this.addTrack} />\n            <Playlist playlistName={this.state.playlistName} \n                      playlistTracks={this.state.playlistTracks}\n                      onRemove={this.removeTrack}\n                      onNameChange={this.updatePlaylistName}\n                      onSave={this.savePlaylist} />\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './Components/App/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}